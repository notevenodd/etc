#!/bin/sh

# Usage: $0 directory
# clean-up and then print the directroy name (in $*) to remove
# extra multiples slashes, '..', and '.' parts. operates
# on string only, the directroy doesn't need to exist.

exists() { command -v "$@" > /dev/null ;}

# "normalize" directory name
# we operate on string only, we don't use realpath -s or readlink -m
# they're not portable outside of GNU/linux anyway

D="$*"

# special case: empty, do nothing
[ -z "$D" ] && exit

# then we deal with . and .. in the path to remove those (.. is
# definitely tricky as we must delete prior path components), but
# here's how we do it:
#
# * prints the directory with a final /
# * shorten any sequence of several slashes to only one / (sed)
# * transform our path to line oriented records in REVERSE order:
#   - swap / and newlines characters (tr)
#   - and reverse lines             (tac)
# * now awk program to deal with .. and .
#   (the idea is when encounter .., we skip the next records)
#   - if line is .  => we just don't print it
#   - if line is .. => don't print, and and increment a 'skip' counter
#   - empty line    => we encounter this in case there was a leading /
#                      then, we're at the last arg and end processing
#   - otherwise     => if skip counter is >0, decrement skip and don't
#                      print, othwerwise we can print the line.
# * of course, now we undo the transformation:
#   - reverse lines using tac
#   - swap back / and new lines
D=$(printf %s "$D/" |
    sed 's://*:/:g' |
                    \
    tr '/\n' '\n/'  |
    portably-tac    |
                    \
    awk '  /^$/     { skip=0; printf "\n"; exit; }
           /^\.$/   { next; }
           /^\.\.$/ { skip++; next; }
                    { if (skip>0) skip--; else print; }
           END      { for(; skip>0; skip--) printf "..\n"; }
        '           |
    portably-tac    |
    tr '/\n' '\n/'  )

# D is now the normalized directory name with a final / (or D is null
# if it represents the current dir). if D is not the root, remove that
# final slash
[ "$D" = '/' ] || D=${D%?}

[ -z "$D" ] || printf '%s\n' "$D"
